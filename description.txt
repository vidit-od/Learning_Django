1] Dynamic data assignment

objective of this project is to startup a django file and learn how to pass data from backend to front end. we have not yet to connect a backend storage, but we will hardode the data for now 

    procedure:
    
(cmd)   a)workon Learning_Django (Learning_Django is the name of virtual envirnment this repo series)
(cmd)   b)django-admin startproject dynamic data assignment (will give no message in cmd but will create required files in the dir)
        c)-> manage.py   : responsible for running the server and other important functionalities. we will not need to code anything in it 
          -> urls.py     : all of the links to connected urls are stored here; i.e if we create a new app and create urls in it , it should be passed in here as well
          -> settings.py : this is the most important file of all. all of the changes required in the projects are adjusted from here       
(cmd)   d)python manage.py startapp myapp: creates app for our project. app are the subset for project. a specific feature of the entire project could be created here . eg : instagram dm's could b an app and post feed could be another app. both are part of the same project but works independently
        e)-> urls.py   : creat this file in myapp. link it with urls.py in project.
          -> views.py  :contains list of all the html pages and when to open which
        f)create templates folder in the root dir. link this with settings.py. templates is the folder where all of the html files goes
        g) set path="" which means it is the home page. then link it with views by dowing views.index and then creating index function in views.py .
        h) now we route from vies to the templates files. but before routing to the html file add a python dictionary which will contain all the key value pair of data comming from back end 
        i) in the html file the value could now be excessed by using double curly braces outside the key  
(cmd)   j) python manage.py run server : we will get an http address. past it in your browser and get the html page running 
(cmd)   k) use ctrl+break /ctrl+c to break out of the server

2] Word_Counter

objective: To create a simple website with form. add text in form and submit. we are redicted to other site which contains total number of words in the form

concepts : GET method vs POST Method

GET method:
  a)create the basic setup for a django file, link index.htm for the home page and counter.htm to be the redicted page 
  b) add 'base\counter' as link for the second page from urls.py. use views.counter to pass data in the counter page when it loades 
  c) in the function of counter in views.py use text= request.get to get the entire text content in 'text' variable 
  d)use len(text.split()) to count the number of word.use it in the website with {{text}} formate as learned in the previous project

  when  base\counter is poped up we se the url as base\counter\text=all the text we wrote in form
  this is a disadvantage for using get method.
  as private data like bank details and social media login details are not safe to be passed in the link we use post method here

POST method:
  a) almost all of the setup is similar. only change in index.html is in form method we use 'POST' now
  b) in the first line of corm tag add {% csrf_token %}
  c) no changes in urls.py , in views.py insted of request.GET we use request.POST

  now when we run this app, in the counter page text= content is not shown 

3] Static Files
  In Django  all of the HTML files are called template files. all the other files such as image, css, js etc are called static files 
  Now usually we just use the link tag to link html with any other file but it is not completly true in django. a certain procedure i needed to be followed which is:
    a)create a folder named static which will contain all of these files 
    b)in settings.py import os and below static file url add 'STATICFILES_DIRS=(os.path.join(BASE_DIR,'static'),)'. note it is a tuple and hence the empty field after comma is neccery 
    c)on top of the html file use {% load static %} to load the static tag
    d) now we can use all of the href and src's easily. but there is 1 difference: 
      initially : a href= "abc" 
      now : a href = "{% static 'abc' %}" . note the spaces and format is very specific and should be used as it is. 

  procedure to add other html page:
    a href = "{urls "index"}" 

4] Models
  -> model view template
  -> this is how data transfers in django. model is the file which contain information. it is transfered to views and then to templates.
  -> we have to add "from .model import 'name of class' in the views file to access it"  

  in template files conventionally we cannot use conditional statements like for if etc. but in django we can
  eg:way to use for in html with django

    {% for i in range(10) %}
      <h1>hello<\h1>
    {% endfor %}

  we have to use endfor tag in django coz usually ending in python is done through indentation. but indenting in html is not possible so we use {% endfor %} tag 